# -*- coding: utf-8 -*-
"""Youtube API V3 Query

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v91hOyOTJ8ZjheiQlZR2JTC_5IwNIWXk

Welcome:

This is a Youtube API V3 Query. With this code you can get info of the first 50 videos with the most amount of views in Youtube. Information such as video_id, channel_ID, amount of views, amount of likes, country, duration and other features are extracted from the youtube database using this code. Enjoy!
"""

#Introduce your own API credentials and then run the code to get the info/ introduce tus credenciales de la API y corre el código para obtener la información
API_KEY =""

#Importamos las librerias necesarias
import pandas as pd
!pip install google-api-python-client
from googleapiclient.discovery import build
#https://developers.google.com/youtube/v3?hl=es-419

#Creamos la variable service que busca los videos de youtube y los ordena por la Cantidad de vistas
with build('youtube','v3',developerKey=API_KEY) as service:
  request = service.search().list(
       part='snippet',q='',order='viewCount',type='video',maxResults=50
  )
response =request.execute()


#Creamos la variable que sera el dataframe final
top_videos = []


for search_result in response['items']:
    video_id = search_result['id']['videoId']
    video_title = search_result['snippet']['title']
    channel_id=search_result['snippet']['channelId']
    channel_title= search_result['snippet']['channelTitle']
    live_content= search_result['snippet']['liveBroadcastContent']
    publish_time= search_result['snippet']['publishTime']


#carga de la informacion del videos individuales
    video_response = service.videos().list(
                id=video_id,
                part='snippet,statistics,contentDetails').execute()


    channel_response= service.channels().list(
                  part='snippet,statistics,brandingSettings,status'
                  ,id=channel_id
              ).execute()

#Guardar las variables de canal
    channel_info=channel_response['items'][0]
    custom_url = channel_info['snippet'].get('customUrl', '')
    country = channel_info['snippet'].get('country', '')
    uploads_count = int(channel_info['statistics']['videoCount'])
    subscribers_count = int(channel_info['statistics']['subscriberCount'])
    privacy_status = channel_info['status']['privacyStatus']

#guardar las variables de Video de statics
    statistics=video_response['items'][0]['statistics']
    view_count = int(statistics['viewCount'])
    like_count = int(statistics.get('likeCount', 0))
    favorite_count = int(statistics.get('favoriteCount', 0))
    comment_count = int(statistics.get('commentCount', 0))


    video_details=video_response['items'][0]
    video_duration=video_details['contentDetails']['duration']
    video_dimension=video_details['contentDetails']['dimension']
    video_url=f'https://www.youtube.com/watch?v={video_id}'



#Agregamos a la variable Top Videos la informacion
    top_videos.append({'video_id': video_id, 'video_title': video_title,'Channel':channel_id,'Channel Title':channel_title,'Visitas [M]':round(view_count/1000000,2)
    ,'Likes':like_count,'Favorite count':favorite_count,'Comment Count':comment_count,'Live Content':live_content,'Publish Time':publish_time,'Custom Url':custom_url,
                       'Country':country,'Uploads':uploads_count,'Subscribers [k]':round(subscribers_count/1000,0),'Privacy':privacy_status,'Duration':video_duration,
                       'Dimension':video_dimension,'Video URl':video_url})



df=pd.DataFrame(top_videos)
df[['Publish Date', 'Publish_Time']] = df['Publish Time'].str.split('T', expand=True)
df.drop('Publish Time', axis=1)
df